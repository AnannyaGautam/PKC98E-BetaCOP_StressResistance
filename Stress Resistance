This folder contains processed datasets from the Drosophila Activity Monitoring System (DAMS) used to assess stress resistance under starvation and paraquat-induced oxidative stress. Each file represents individual fly-level survival data recorded as time-to-death (hours) and corresponding metadata (genotype, diet, monitor ID, and replicate).

#master script to read the files and parse the data
```{r}

rm(list = ls())

DATA_DIR <- "D:/DAMS/Paraquat Assay 21082025/Analysis"
OUTPUT_DIR <- file.path(DATA_DIR, "Output")
SAVE_DIR <- file.path(DATA_DIR, "Paraquat")


if (!dir.exists(SAVE_DIR)) {
  dir.create(SAVE_DIR)
}

#List monitor files 
fn.vec <- list.files(OUTPUT_DIR, pattern = "MyRun.*CtM.*\\.txt$", full.names = FALSE)
if (length(fn.vec) == 0) {
  stop("No monitor output files found in the Output folder. Check the path and file names.")
}

#Full file paths to monitor files
fp.vec <- file.path(OUTPUT_DIR, fn.vec)

file.dat <- lapply(fp.vec, read.table, sep = "\t", header = FALSE)
names(file.dat) <- fn.vec
cat("Files found:\n")
print(fn.vec)
cat("Number of files read:", length(file.dat), "\n")

file.dat = lapply(fp.vec, read.table, sep = "\t", header = FALSE)
names(file.dat) = fn.vec
mon.dat = lapply(file.dat, function(tab) tab[,-(1:10)])
active.rows = lapply(mon.dat, function(tab) which(apply(tab, 1, function(rw) !all(rw == 0)))) 
all.first.rows = sapply(active.rows, function(x) x[1])
if (length(unique(all.first.rows)) > 1) print("WARNING! Montior reads don't start at the same time. Check files.")

# Find per-monitor first and last active rows
first_i <- vapply(active.rows, function(x) x[1], integer(1))
last_i  <- vapply(active.rows, function(x) max(x) + 1L, integer(1))  # include a trailing bin

# Trim each monitor to its own active window
trunc.dat <- lapply(seq_along(mon.dat), function(i) {
  mon.dat[[i]][ first_i[i] : last_i[i], , drop = FALSE ]
})
trunc.dm <- lapply(trunc.dat, data.matrix)

# Per-monitor "last alive" index (relative to each monitor's own start)
threshold <- 2
y <- lapply(trunc.dm, function(x) {
  apply(x, 2, function(w) {
    idx <- tail(which(w > threshold), 1)
    if (length(idx) == 0) NA_integer_ else idx
  })
})
setwd(DATA_DIR)
Monitorinfo <- read.csv("Monitor.info.csv")
monitor.list = lapply(seq_along(y), function(i) data.frame(lastalive=y[[i]], condition=Monitorinfo[1:ncol(trunc.dm[[i]]), i],Monitor=i)) 

library(tidyverse)

bin_minutes <- 5
rows_per_day <- 24 * 60 / bin_minutes   # 288 when bin = 5 min

channels_per_monitor <- ncol(trunc.dm[[1]])  # should be 32

per_fly <- purrr::map_dfr(seq_along(trunc.dm), function(i) {
  labels_i <- Monitorinfo[seq_len(channels_per_monitor), i]
  tibble(
    Monitor   = i,
    Channel   = seq_len(channels_per_monitor),
    condition = labels_i,
    last_idx  = y[[i]],                       # last-active index in this monitor's window
    n_bins    = nrow(trunc.dm[[i]]),
    time_hr   = last_idx * bin_minutes / 60,
    event     = as.integer(last_idx < n_bins), # 1=dead, 0=censored
  )
})

# Parse G####_D##_V# 
per_fly <- per_fly %>%
  tidyr::extract(condition, c("Genotype","Diet","Vial"),
                 regex = "G(\\d+)_D(\\d+)_V(\\d+)", remove = FALSE, convert = TRUE) %>%
  mutate(
    Diet_lab = factor(ifelse(is.na(Diet), NA, paste0(Diet, "%"))),
    Genotype = factor(Genotype),
    Vial     = as.integer(Vial)
  )

library(dplyr)
library(tidyr)
library(ggplot2)
library(survival)
library(survminer)
library(coxme)
library(patchwork)
library(broom)
library(stringr)

#check if blanks have a time
```{r}
per_fly %>%
  filter(Genotype %in% c("blank1", "blank2")) %>%
  summarise(
    any_time = any(!is.na(time_hr)),
    n_non_na = sum(!is.na(time_hr))
  )

#Plotting the genos 
```{r}
pf_clean <- function(pf) {
  pf %>%
    tidyr::extract(condition, into = c("Genotype","Diet","Vial"),
                   regex = "G(\\d+)_D(\\d+)_V(\\d+)", remove = FALSE, convert = TRUE) %>%
    mutate(
      Genotype = as.character(Genotype),  
      Diet     = as.integer(Diet),
      Vial     = as.integer(Vial),
      Diet_lab = factor(paste0(Diet, "%"), levels = c("5%","20%"))
    ) %>%
    filter(!is.na(time_hr), !is.na(event))
}

geno_labs <- c(
  "1007" = "Control (w1118 EV)",
  "1477" = "PKC98E RNAi",
  "1008" = "Control (w1118)",
  "1491" = "β'COP RNAi",
  "7791" = "PKC98E RNAi/β'COP RNAi"
)


diet_cols <- c("5%" = "#1b9e77", "20%" = "#d95f02")



geno_ltypes_master <- c(
  "Control (w1118 EV)"       = "solid",
  "PKC98E RNAi"              = "longdash",
  "Control (w1118)"          = "solid",
  "β'COP RNAi"               = "longdash",
  "PKC98E RNAi/β'COP RNAi"   = "twodash"
)

make_titles <- function(used_labels) {
  list(
    title = "Paraquat survival by genotype and diet",
    subtitle = paste(used_labels, collapse = "   |   ")
  )
}

plot_pair <- function(genos, pf = per_fly, base_size = 12) {
  # --- clean & subset ---
  df <- pf_clean(pf) %>%
    dplyr::filter(Genotype %in% genos, Diet %in% c(5, 20)) %>%
    dplyr::mutate(
      GenotypeLab = dplyr::recode(Genotype, !!!geno_labs) |> factor(),
      Diet_str    = factor(paste0(Diet, "%"), levels = c("5%","20%"))
    ) %>%
    droplevels()

  x_max   <- ceiling(max(df$time_hr, na.rm = TRUE) / 24) * 24
  y_break <- 24
  used_geno <- levels(df$GenotypeLab)

  # --- SURVIVAL (DIY) ---
  df <- df %>% dplyr::mutate(grp = interaction(GenotypeLab, Diet_str, sep = " | ", drop = TRUE))
  sf <- survival::survfit(survival::Surv(time_hr, event) ~ grp, data = df)

  td <- broom::tidy(sf) %>%
    dplyr::mutate(grp = sub("^.*?=", "", strata)) %>%            # <— remove "grp="
    tidyr::separate(grp, into = c("GenotypeLab","Diet_str"),
                    sep = "\\s\\|\\s", remove = TRUE) %>%
    dplyr::mutate(
      GenotypeLab = factor(GenotypeLab, levels = used_geno),
      Diet_str    = factor(Diet_str,    levels = c("5%","20%"))
    )

  p_surv <- ggplot(td, aes(time, estimate,
                         colour = Diet_str, linetype = GenotypeLab)) +
  geom_step(linewidth = 0.9) +
  scale_colour_manual(values = diet_cols, name = "Diet") +
  scale_linetype_manual(values = geno_ltypes_master[used_geno], name = "Genotype") +
  scale_x_continuous("Time (hours)", limits = c(0, x_max),
                     breaks = seq(0, x_max, by = y_break)) +
  scale_y_continuous("Survival probability", limits = c(0, 1.02)) +
  labs(title = "C  Paraquat survival by genotype and diet") +
  theme_classic(base_size = base_size) +
  theme(
    plot.title        = element_text(face = "bold"),
    legend.position   = "top",
    legend.box        = "vertical",      # stack Diet row above Genotype row
    legend.direction  = "horizontal",
    legend.text       = element_text(size = 9.5),
    legend.title      = element_text(size = 10),
    legend.key.width  = grid::unit(28, "pt"),  # longer keys so dashes are visible
    legend.key.height = grid::unit(10, "pt"),
    legend.spacing.x  = grid::unit(6, "pt"),
    legend.margin     = margin(t = 2, r = 0, b = 4, l = 0)
  ) +
  guides(
    color = guide_legend(
      order = 1, nrow = 1, byrow = TRUE,
      override.aes = list(linetype = "solid", size = 1.2)
    ),
    linetype = guide_legend(
      order = 2, nrow = 1, byrow = TRUE,
      keywidth = grid::unit(32, "pt"),          # even longer just for linetype
      override.aes = list(color = "grey25", size = 1.2)
    )
  )

  # --- BOXPLOT (x = genotype; colours = diet) ---
  df_deaths <- df %>% dplyr::filter(event == 1L)

  p_box <- ggplot(df_deaths, aes(x = GenotypeLab, y = time_hr,
                               fill = Diet_str, colour = Diet_str)) +
  geom_boxplot(alpha = 0.35, outlier.shape = NA,
               position = position_dodge(width = 0.75), width = 0.6) +
  geom_jitter(position = position_jitterdodge(jitter.width = 0.12,
                                              dodge.width = 0.75),
              alpha = 0.6, size = 1.2) +
  scale_fill_manual(values = diet_cols, name = "Diet") +
  scale_colour_manual(values = diet_cols, name = "Diet") +
  scale_y_continuous(limits = c(0, x_max), breaks = seq(0, x_max, by = y_break)) +
  labs(title = "D  Time to death under Paraquat", x = "Genotype", y = "Hours") +
  theme_classic(base_size = base_size) +
  theme(
    plot.title  = element_text(face = "bold"),
    legend.position = "top",
    axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5, margin = margin(t = 6))
  )

  list(surv = p_surv, box = p_box,
       subtitle = paste(used_geno, collapse = "   |   "))
}


```
#make different pairs 
```{r}
res_1007_1477 <- plot_pair(c("1007","1477"))

FINAL_PLOT_PKC <- patchwork::wrap_plots(
  list(res_1007_1477$surv, res_1007_1477$box),
  ncol = 2
) + patchwork::plot_annotation(
  title = "Paraquat survival by genotype and diet",
  subtitle = res_1007_1477$subtitle
)

res_1008_1491 <- plot_pair(c("1008","1491"))

FINAL_PLOT_COPB2 <- patchwork::wrap_plots(
  list(res_1008_1491$surv, res_1008_1491$box),
  ncol = 2
) + patchwork::plot_annotation(
  title = "Paraquat survival by genotype and diet",
  subtitle = res_1008_1491$subtitle
)

res_1477_7791_1491 <- plot_pair(c("1477", "7791", "1491"))

FINAL_PLOT_dKD <- patchwork::wrap_plots(
  list(res_1477_7791_1491$surv, res_1477_7791_1491$box),
  ncol = 2
) + patchwork::plot_annotation(
  title = "Paraquat survival by genotype and diet",
  subtitle = res_1477_7791_1491$subtitle
)


```

#Activity Data parsing 
```{r}
# Load libraries
library(tidyverse)

geno_labs <- c(
  "1007" = "Control (w1118 EV)",
  "1008" = "Control (w1118)",
  "1477" = "PKC98E RNAi",
  "1491" = "β′COP RNAi",
  "7791" = "PKC98E/β′COP RNAi"
)


activity_long <- purrr::map_dfr(seq_along(trunc.dm), function(i) {
  m <- as_tibble(trunc.dm[[i]])
  colnames(m) <- paste0("Ch", seq_len(ncol(m)))
  m %>%
    mutate(Monitor = i,
           time_hr = (row_number() - 1) * bin_minutes / 60) %>%
    pivot_longer(starts_with("Ch"), names_to = "Channel", values_to = "activity") %>%
    mutate(Channel = as.integer(sub("Ch", "", Channel)),
           condition = Monitorinfo[Channel, i])
})

act_hr <- activity_long %>%
  extract(condition, c("Genotype", "Diet", "Vial"),
          regex = "G(\\d+)_D(\\d+)_V(\\d+)", remove = FALSE, convert = TRUE) %>%
  filter(!is.na(Genotype), Diet %in% c(5, 20)) %>%
  mutate(
    Genotype = dplyr::recode(as.character(Genotype), !!!geno_labs),
    Diet_lab = factor(paste0(Diet, "% sugar"), levels = c("5% sugar", "20% sugar")),
    hour = floor(time_hr)
  ) %>%
  group_by(Diet_lab, Genotype, hour) %>%
  summarise(mean_act = mean(activity, na.rm = TRUE), .groups = "drop")

# Determine max time for x-axis scaling
xmax <- max(act_hr$hour, na.rm = TRUE)

# Plot
ggplot(act_hr, aes(hour, mean_act, group = Genotype)) +
  geom_line(linewidth = 0.5, colour = "black") +
  facet_grid(Diet_lab ~ Genotype, scales = "free_y") +
  scale_x_continuous(
    "Time (hours)",
    breaks = seq(0, xmax, by = 24),
    expand = expansion(mult = c(0, 0.02))
  ) +
  ylab("Beam breaks per fly (hourly mean)") +
  theme_classic(base_size = 14) +
  theme(
    axis.text.x = element_text(size = 10, angle = 40, hjust = 1, colour = "black"),
    axis.text.y = element_text(size = 10, colour = "black"),
    axis.title = element_text(size = 13, face = "bold"),
    strip.background = element_rect(fill = "white", colour = "black"),
    strip.text.x = element_text(size = 11, face = "bold"),
    strip.text.y = element_text(size = 11, face = "bold"),
    panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.4),
    panel.spacing = unit(0.5, "lines"),
    plot.margin = margin(10, 10, 10, 10)
  )

```
# Quantifying the activity data. AUC - Area under the curve 
per_fly_auc <- activity_long %>%
  tidyr::extract(condition, c("Genotype","Diet","Vial"),
                 regex = "G(\\d+)_D(\\d+)_V(\\d+)", remove = FALSE, convert = TRUE) %>%
  filter(!is.na(Genotype), Diet %in% c(5, 20)) %>%
  mutate(dt_hr = bin_minutes/60) %>%
  group_by(Monitor, Channel, Genotype, Diet) %>%
  summarise(AUC_hr = sum(activity * dt_hr, na.rm = TRUE), .groups = "drop") %>%
  mutate(Diet_lab = factor(paste0(Diet, "%"), levels = c("5%","20%")))

m_act <- lmer(AUC_hr ~ Diet_lab + (1|Genotype), data = per_fly_auc)

#make dfs for different pairs 

```{r}
df_pair_PKC <- per_fly %>%
  filter(Genotype %in% c(1007, 1477)) %>%
  filter(!is.na(time_hr), !is.na(event)) %>%
  mutate(
    Genotype = factor(as.character(Genotype), levels = c("1007","1477")),
    Diet_f   = factor(Diet, levels = c(5, 20), labels = c("5%", "20%")),
    Monitor  = factor(Monitor)
  )

df_pair_PKC_5 <- per_fly %>%
  filter(Genotype %in% c(1007, 1477)) %>%
  filter(Diet %in% 5) %>%
  filter(!is.na(time_hr), !is.na(event)) %>%
  mutate(
    Genotype = factor(as.character(Genotype), levels = c("1007","1477")),
    Diet_f   = factor(Diet, levels = c(5), labels = c("5%")),
    Monitor  = factor(Monitor)
  )

df_pair_PKC_20 <- per_fly %>%
  filter(Genotype %in% c(1007, 1477)) %>%
  filter(Diet %in% 20) %>%
  filter(!is.na(time_hr), !is.na(event)) %>%
  mutate(
    Genotype = factor(as.character(Genotype), levels = c("1007","1477")),
    Diet_f   = factor(Diet, levels = c(20), labels = c("20%")),
    Monitor  = factor(Monitor)
  )

df_pair_COPB2 <- per_fly %>%
  filter(Genotype %in% c(1008, 1491)) %>%
  filter(!is.na(time_hr), !is.na(event)) %>%
  mutate(
    Genotype = factor(as.character(Genotype), levels = c("1008","1491")),
    Diet_f   = factor(Diet, levels = c(5, 20), labels = c("5%", "20%")),
    Monitor  = factor(Monitor)
  )

df_pair_COPB2_5 <- per_fly %>%
  filter(Genotype %in% c(1008, 1491)) %>%
  filter(Diet %in% 5) %>%
  filter(!is.na(time_hr), !is.na(event)) %>%
  mutate(
    Genotype = factor(as.character(Genotype), levels = c("1008","1491")),
    Diet_f   = factor(Diet, levels = c(5), labels = c("5%")),
    Monitor  = factor(Monitor)
  )

df_pair_COPB2_20 <- per_fly %>%
  filter(Genotype %in% c(1008, 1491)) %>%
  filter(Diet %in% 20) %>%
  filter(!is.na(time_hr), !is.na(event)) %>%
  mutate(
    Genotype = factor(as.character(Genotype), levels = c("1008","1491")),
    Diet_f   = factor(Diet, levels = c(20), labels = c("20%")),
    Monitor  = factor(Monitor)
  )

df_pair_dKD <- per_fly %>%
  filter(Genotype %in% c(1477,7791, 1491)) %>%
  filter(!is.na(time_hr), !is.na(event)) %>%
mutate(
    Genotype = factor(as.character(Genotype), 
                      levels = c("7791", "1477", "1491")),  
    Diet_f   = factor(Diet, levels = c(5, 20), labels = c("5%", "20%")),
    Monitor  = factor(Monitor)
  )

df_pair_dKD_5 <- per_fly %>%
  filter(Genotype %in% c(1477, 1491, 7791)) %>%
    filter(Diet %in% 5) %>%
  filter(!is.na(time_hr), !is.na(event)) %>%
  mutate(
    Genotype = factor(as.character(Genotype), 
                      levels = c("7791", "1477", "1491")),  # 7791 first
    Diet_f   = factor(Diet, levels = c(5), labels = c("5%")),
    Monitor  = factor(Monitor)
  )
df_pair_dKD_20 <- per_fly %>%
  filter(Genotype %in% c(1477, 1491, 7791)) %>%
    filter(Diet %in% 20) %>%
  filter(!is.na(time_hr), !is.na(event)) %>%
  mutate(
    Genotype = factor(as.character(Genotype), 
                      levels = c("7791", "1477", "1491")),  # 7791 first
    Diet_f   = factor(Diet, levels = c(20), labels = c("20%")),
    Monitor  = factor(Monitor)
  )


```

#COX models

```{r}
library(coxme)
coxme_fit_PKC <- coxme(Surv(time_hr, event) ~ Genotype * Diet_f + (1|Monitor),
                   data = df_pair_PKC)


coxme_fit_PKC_5 <- coxme(Surv(time_hr, event) ~ Genotype + (1|Monitor),
                   data = df_pair_PKC_5)

coxme_fit_PKC_20 <- coxme(Surv(time_hr, event) ~ Genotype + (1|Monitor),
                   data = df_pair_PKC_20)

coxme_fit_COPB2 <- coxme(Surv(time_hr, event) ~ Genotype * Diet_f + (1|Monitor),
                   data = df_pair_COPB2) 

  
coxme_fit_COPB2_5 <- coxme(Surv(time_hr, event) ~ Genotype + (1|Monitor),
                   data = df_pair_COPB2_5)

coxme_fit_COPB2_20 <- coxme(Surv(time_hr, event) ~ Genotype + (1|Monitor),
                   data = df_pair_COPB2_20)

coxme_fit_dKD <- coxme(Surv(time_hr, event) ~ Genotype * Diet_f + (1|Monitor),
                   data = df_pair_dKD) 

coxme_fit_dKD_5 <- coxme(Surv(time_hr, event) ~ Genotype  + (1|Monitor),
                   data = df_pair_dKD_5)

coxme_fit_dKD_20 <- coxme(Surv(time_hr, event) ~ Genotype  + (1|Monitor),
                   data = df_pair_dKD_20)

```

 
